<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Classic Arcade Gambling</title>
  <style>
    body {
      font-family: 'Courier New', monospace;
      background: #0e0e0e;
      color: #f5f5f5;
      text-align: center;
      margin: 0;
      padding: 20px;
    }
    button, input, select {
      background: #222;
      color: white;
      border: 1px solid #555;
      font-size: 16px;
      padding: 10px;
      margin: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #333;
    }
    #menuBar button {
      font-weight: bold;
    }
    #slot, #card-area {
      font-size: 36px;
      margin: 20px 0;
    }
    .slot-anim {
      animation: slot-spin 0.1s linear infinite;
    }
    @keyframes slot-spin {
      0% { filter: brightness(1); transform: scale(1.1) rotate(-4deg);}
      50% { filter: brightness(1.8); transform: scale(1.2) rotate(4deg);}
      100% { filter: brightness(1); transform: scale(1.1) rotate(-4deg);}
    }
    .section {
      display: none;
      margin-top: 20px;
    }
    #loan-warning {
      color: orange;
    }
    #result {
      margin: 10px;
      font-weight: bold;
    }
    table {
      width: 90%;
      margin: auto;
      background: #222;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #444;
      padding: 8px;
    }
    /* Scratch Ticket Styles */
    #scratch-modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.85);
      align-items: center;
      justify-content: center;
    }
    #scratch-ticket-container {
      background: #252525;
      border-radius: 12px;
      box-shadow: 0 4px 24px #000a;
      padding: 30px 24px 24px 24px;
      min-width: 340px;
      min-height: 320px;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative;
    }
    #scratch-ticket-title {
      font-size: 1.8em;
      font-family: Impact, 'Courier New', Courier, monospace;
      margin-bottom: 8px;
      letter-spacing: 2px;
      color: #f8d34a;
      text-shadow: 2px 2px 0 #444;
    }
    #scratch-close {
      position: absolute;
      right: 18px;
      top: 14px;
      font-size: 1.4em;
      color: #888;
      background: none;
      border: none;
      cursor: pointer;
    }
    #scratch-canvas {
      background: #b2b2b2;
      margin: 18px 0;
      border-radius: 10px;
      box-shadow: 0 1px 10px #0004;
      touch-action: none;
      border: 2px solid #f8d34a;
      display: block;
    }
    #scratch-ticket-result {
      font-size: 1.3em;
      color: #fff;
      margin-top: 10px;
      min-height: 34px;
    }
    #scratch-ticket-prizes {
      color: #e9e9e9;
      font-size: 1em;
      margin-top: 5px;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>

  <h1>üé∞ Classic Arcade Gambling</h1>

  <div id="menuBar">
    <button onclick="showSection('home')">Home</button>
    <button onclick="showSection('loanCenter')">Loan Center</button>
    <button onclick="showSection('housingMarket')">Housing Market</button>
  </div>

  <div id="home" class="section" style="display:block;">
    <div>
      <label for="betAmount">Bet Amount: $</label>
      <input type="number" id="betAmount" value="10" min="1" />
    </div>
    <div>
      <button id="slotBtn" onclick="spin()">Spin Slot</button>
      <button onclick="drawCard()">High Card</button>
      <button onclick="playScratchTicket()">üßæ Scratch Ticket ($20)</button>
    </div>
    <div id="slot">üçí üçã üçä</div>
    <div id="card-area">You: üÇ† | Dealer: üÇ†</div>
  </div>

  <div id="loanCenter" class="section">
    <div>
      <label for="loanAmount">Loan Amount:</label>
      <select id="loanAmount">
        <option value="100">$100</option>
        <option value="200">$200</option>
        <option value="500">$500</option>
      </select>
      <button onclick="takeLoan()">üí∏ Take Loan</button>
    </div>
    <div id="loan-warning"></div>
    <div id="loan-buttons"></div>
    <h3>üìã Loan History</h3>
    <table>
      <thead><tr><th>Amount</th><th>Due</th><th>Time Left</th><th>Status</th></tr></thead>
      <tbody id="loan-history"></tbody>
    </table>
  </div>

  <div id="housingMarket" class="section">
    <h2>üè† Housing Market</h2>
    <div id="housesForSale"></div>
    <div>
      <h3>Owned Properties</h3>
      <ul id="ownedHousesList"></ul>
    </div>
  </div>

  <div id="result"></div>
  <div id="balance">Balance: $100</div>
  <div id="reputation">üè¶ Reputation: 100</div>

  <!-- SCRATCH TICKET MODAL -->
  <div id="scratch-modal">
    <div id="scratch-ticket-container">
      <button id="scratch-close" onclick="closeScratchModal()">‚úñ</button>
      <div id="scratch-ticket-title">SCRATCH &amp; WIN</div>
      <div id="scratch-ticket-prizes">
        Match 3 to Win!<br>
        <span style="color:#f8d34a;">Jackpot: $500</span> | $50 | $5 | Sorry!
      </div>
      <div style="position:relative;display:inline-block;">
        <canvas id="scratch-canvas" width="320" height="120"></canvas>
        <!-- Prize number overlay (drawn in JS, not HTML) -->
      </div>
      <div id="scratch-ticket-result"></div>
    </div>
  </div>

  <script>
    let balance = 100;
    let reputation = 100;
    let activeLoans = [];
    const loanHistory = [];
    const ownedHouses = [];

    const symbols = ['üçí', 'üçã', 'üçä', 'üçâ', 'üçá', 'üíé'];
    const cardValues = Array.from({length: 13}, (_, i) => i + 2);
    const cardFaces = {11: 'J', 12: 'Q', 13: 'K', 14: 'A'};

    // Slot machine cooldown/animation state
    let slotCooldown = false;
    let slotAnimInterval = null;
    let slotAnimFrames = 0;

    function showSection(id) {
      document.querySelectorAll('.section').forEach(s => s.style.display = 'none');
      document.getElementById(id).style.display = 'block';
      if (id === 'housingMarket') renderHousingMarket();
    }

    function rand(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
    }

    function getBet() {
      const bet = parseInt(document.getElementById("betAmount").value);
      return isNaN(bet) || bet <= 0 ? 0 : bet;
    }

    function spin() {
      if (slotCooldown) return;
      const bet = getBet();
      if (bet > balance) return showMessage("üí∏ Not enough balance!");
      if (bet <= 0) return showMessage("Enter a valid bet!");
      balance -= bet;

      // Start animation
      slotCooldown = true;
      const slotBtn = document.getElementById("slotBtn");
      slotBtn.disabled = true;
      slotBtn.textContent = "Slot Cooldown (5s)";
      document.getElementById("slot").classList.add("slot-anim");
      document.getElementById("card-area").textContent = "You: üÇ† | Dealer: üÇ†";
      
      // Animate slot
      let animSymbols = symbols.slice();
      let lastCombo = [];
      slotAnimFrames = 0;
      slotAnimInterval = setInterval(() => {
        // Show random symbols for animation
        lastCombo = [rand(animSymbols), rand(animSymbols), rand(animSymbols)];
        document.getElementById("slot").textContent = lastCombo.join(' ');
        slotAnimFrames++;
      }, 80);

      // After 2 seconds, stop animation and show result, but keep cooldown for 3 more seconds
      setTimeout(() => {
        clearInterval(slotAnimInterval);

        const [s1, s2, s3] = [rand(symbols), rand(symbols), rand(symbols)];
        document.getElementById("slot").textContent = `${s1} ${s2} ${s3}`;
        document.getElementById("slot").classList.remove("slot-anim");

        const jackpotChance = Math.random();
        if (jackpotChance < 0.01) {
          balance += bet * 1000;
          showMessage(`üí∞ JACKPOT!!! You won $${(bet * 1000).toLocaleString()}`);
        } else if (s1 === s2 && s2 === s3) {
          balance += bet * 5;
          showMessage(`üéâ Triple Match! You won $${bet * 5}`);
        } else if (s1 === s2 || s2 === s3 || s1 === s3) {
          balance += bet * 2;
          showMessage(`üëç Matched 2! Won $${bet * 2}`);
        } else {
          showMessage("‚ùå You lost the spin.");
        }
        updateStats();

        // Continue cooldown for 3 more seconds
        let cd = 3;
        const updateBtn = () => {
          slotBtn.textContent = `Slot Cooldown (${cd--}s)`;
          if (cd >= 0) setTimeout(updateBtn, 1000);
          else {
            slotBtn.disabled = false;
            slotBtn.textContent = "Spin Slot";
            slotCooldown = false;
          }
        };
        updateBtn();
      }, 2000);
    }

    function drawCard() {
      const bet = getBet();
      if (bet > balance) return showMessage("üí∏ Not enough balance!");
      if (bet <= 0) return showMessage("Enter a valid bet!");
      balance -= bet;

      const player = rand(cardValues);
      const dealer = rand(cardValues);
      const playerFace = cardFaces[player] || player;
      const dealerFace = cardFaces[dealer] || dealer;

      document.getElementById("slot").textContent = "üçí üçã üçä";
      document.getElementById("card-area").textContent = `You: ${playerFace} | Dealer: ${dealerFace}`;

      if (player > dealer) {
        balance += bet * 2;
        showMessage(`üéâ You win! (+$${bet * 2})`);
      } else if (player === dealer) {
        balance += bet;
        showMessage("ü§ù Tie. You get your money back.");
      } else {
        showMessage("‚ùå Dealer wins. You lost your bet.");
      }

      updateStats();
    }

    // --- SCRATCH TICKET LOGIC ---
    function playScratchTicket() {
      const cost = 20;
      if (balance < cost) {
        return showMessage("üí∏ Not enough money for a scratch ticket!");
      }
      balance -= cost;
      updateStats();
      showScratchModal();
    }

    function getScratchTicketSymbols() {
      const roll = Math.random();
      let prize = 0, label = "", winningSymbol = "";
      const prizeTable = [
        {chance: 1/20, value:500, label:"JACKPOT! $500", emoji:"üí∞"},
        {chance: 1/5, value:50, label:"$50", emoji:"üíµ"},
        {chance: 1/2, value:5, label:"$5", emoji:"ü•≥"},
      ];
      let acc = 0;
      for (const p of prizeTable) {
        acc += p.chance;
        if (roll < acc) {
          prize = p.value; label = p.label; winningSymbol = p.emoji;
          break;
        }
      }
      if (prize === 0) {
        let pool = ["üçí","üçã","üçä","üçâ","üíé"];
        let vals = [];
        while (true) {
          vals = [rand(pool),rand(pool),rand(pool)];
          if (!(vals[0] === vals[1] && vals[1] === vals[2])) break;
        }
        return {symbols:vals, prize:0, label:"Sorry! No win."};
      } else {
        return {symbols:[winningSymbol,winningSymbol,winningSymbol], prize, label:"You won "+label+"!"};
      }
    }

    let scratchData = null;
    let scratchStarted = false;
    let scratchRevealed = false;
    let scratchPrizeAlpha = 0.2;

    function showScratchModal() {
      scratchData = getScratchTicketSymbols();
      scratchStarted = false;
      scratchRevealed = false;
      document.getElementById("scratch-ticket-result").textContent = "";
      document.getElementById("scratch-modal").style.display = "flex";
      drawScratchTicket(0.2);
      setupScratchCanvas();
    }

    function closeScratchModal() {
      document.getElementById("scratch-modal").style.display = "none";
    }

    function drawScratchTicket(prizeAlpha = 1) {
      const canvas = document.getElementById("scratch-canvas");
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      // Prize number
      ctx.save();
      ctx.font = "bold 40px Courier New, monospace";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      ctx.globalAlpha = prizeAlpha;
      ctx.fillStyle = "#f8d34a";
      const prizeText = (scratchData.prize > 0) ? `$${scratchData.prize}` : "$0";
      ctx.fillText(prizeText, canvas.width/2, canvas.height - 10);
      ctx.globalAlpha = 1;
      ctx.restore();
      // Symbols
      ctx.save();
      ctx.font = "bold 56px serif";
      ctx.textAlign = "center";
      ctx.textBaseline = "top";
      for (let i = 0; i < 3; ++i) {
        ctx.fillText(scratchData.symbols[i], 70 + 90*i, 20);
      }
      ctx.restore();
      // Mask
      ctx.globalCompositeOperation = "source-over";
      ctx.fillStyle = "#a6a6a6";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.globalCompositeOperation = "source-over";
    }

    function redrawScratchTicketAlpha(alpha) {
      const canvas = document.getElementById("scratch-canvas");
      const ctx = canvas.getContext("2d");
      const mask = ctx.getImageData(0,0,canvas.width,canvas.height);
      ctx.clearRect(0,0,canvas.width,canvas.height);
      ctx.save();
      ctx.font = "bold 40px Courier New, monospace";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      ctx.globalAlpha = alpha;
      ctx.fillStyle = "#f8d34a";
      const prizeText = (scratchData.prize > 0) ? `$${scratchData.prize}` : "$0";
      ctx.fillText(prizeText, canvas.width/2, canvas.height - 10);
      ctx.globalAlpha = 1;
      ctx.restore();
      ctx.save();
      ctx.font = "bold 56px serif";
      ctx.textAlign = "center";
      ctx.textBaseline = "top";
      for (let i = 0; i < 3; ++i) {
        ctx.fillText(scratchData.symbols[i], 70 + 90*i, 20);
      }
      ctx.restore();
      ctx.globalCompositeOperation = "destination-in";
      ctx.putImageData(mask,0,0);
      ctx.globalCompositeOperation = "source-over";
    }

    function setupScratchCanvas() {
      const canvas = document.getElementById("scratch-canvas");
      const ctx = canvas.getContext("2d");
      drawScratchTicket(0.2);
      let lastX = 0, lastY = 0;
      let totalArea = canvas.width * canvas.height;
      function revealIfEnough() {
        if (scratchRevealed) return;
        const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
        let clearPx = 0;
        for (let i = 3; i < imgData.length; i += 4*8) {
          if (imgData[i] === 0) clearPx++;
        }
        const percent = Math.min(1, (clearPx * 8) / totalArea);
        scratchPrizeAlpha = 0.2 + percent * 0.8;
        redrawScratchTicketAlpha(scratchPrizeAlpha);
        if (percent > 0.6) {
          revealPrize();
        }
      }
      function scratchLine(x, y) {
        ctx.globalCompositeOperation = "destination-out";
        ctx.beginPath();
        ctx.arc(x, y, 22, 0, 2*Math.PI);
        ctx.fill();
        ctx.globalCompositeOperation = "source-over";
      }
      function handleStart(e) {
        scratchStarted = true;
        const rect = canvas.getBoundingClientRect();
        let x, y;
        if (e.touches) {
          x = e.touches[0].clientX - rect.left;
          y = e.touches[0].clientY - rect.top;
        } else {
          x = e.offsetX;
          y = e.offsetY;
        }
        scratchLine(x, y);
        lastX = x; lastY = y;
        revealIfEnough();
      }
      function handleMove(e) {
        if (!scratchStarted) return;
        const rect = canvas.getBoundingClientRect();
        let x, y;
        if (e.touches) {
          x = e.touches[0].clientX - rect.left;
          y = e.touches[0].clientY - rect.top;
        } else {
          x = e.offsetX;
          y = e.offsetY;
        }
        scratchLine(x, y);
        lastX = x; lastY = y;
        revealIfEnough();
      }
      function handleEnd(e) {
        scratchStarted = false;
        revealIfEnough();
      }
      canvas.onmousedown = canvas.onmousemove = canvas.onmouseup = null;
      canvas.ontouchstart = canvas.ontouchmove = canvas.ontouchend = null;

      canvas.onmousedown = handleStart;
      canvas.onmousemove = function(e){ if (scratchStarted) handleMove(e)};
      canvas.onmouseup = handleEnd;
      canvas.onmouseleave = handleEnd;

      canvas.ontouchstart = handleStart;
      canvas.ontouchmove = function(e){ if (scratchStarted) handleMove(e)};
      canvas.ontouchend = handleEnd;
      canvas.ontouchcancel = handleEnd;
    }

    function revealPrize() {
      if (scratchRevealed) return;
      scratchRevealed = true;
      const canvas = document.getElementById("scratch-canvas");
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawScratchTicket(1);
      setTimeout(()=>{
        document.getElementById("scratch-ticket-result").innerHTML = scratchData.label;
        if (scratchData.prize > 0) {
          balance += scratchData.prize;
          showMessage("üéâ Scratch Win: " + scratchData.label);
        } else {
          showMessage("üò¢ Sorry, you didn't win.");
        }
        updateStats();
      }, 250);
    }

    document.getElementById("scratch-canvas").onclick = function(e){
      if (!scratchStarted) {
        scratchStarted = true;
        revealPrize();
      }
    };

    document.getElementById("scratch-ticket-container").addEventListener('dblclick', function(){
      revealPrize();
    });

    // --- END SCRATCH TICKET ---

    function showMessage(msg) {
      document.getElementById("result").textContent = msg;
    }

    function updateStats() {
      document.getElementById("balance").textContent = `Balance: $${balance.toFixed(2)}`;
      document.getElementById("reputation").textContent = `üè¶ Reputation: ${reputation}`;
    }

    function getInterestRate() {
      if (reputation >= 100) return 0.10;
      if (reputation >= 70) return 0.15;
      if (reputation >= 40) return 0.20;
      return 0.25;
    }

    function takeLoan() {
      if (activeLoans.length >= 2) return showMessage("‚ùå Max 2 active loans allowed!");
      const base = parseInt(document.getElementById("loanAmount").value);
      const loan = {
        id: Date.now(),
        base,
        due: base,
        timeLeft: 50,
        interestRate: getInterestRate(),
        repaid: false,
        interval: null,
        interestInt: null
      };
      balance += base;
      activeLoans.push(loan);
      startLoanTimers(loan);

      updateLoanButtons();
      updateStats();
      showMessage(`üíµ Took $${base} loan. Repay in 50s.`);
    }

    function startLoanTimers(loan) {
      loan.interval = setInterval(() => {
        loan.timeLeft--;
        updateLoanButtons();
        if (loan.timeLeft === 0) {
          clearInterval(loan.interval);
          clearInterval(loan.interestInt);
          activeLoans = activeLoans.filter(l => l.id !== loan.id);
          reputation -= activeLoans.length === 0 ? 30 : 50;
          loanHistory.push({...loan, status: "Defaulted"});
          updateLoanButtons();
          updateStats();
          if (reputation <= 0) {
            document.body.innerHTML = '<h1 style="color:red;">üèöÔ∏è You\'re bankrupt. GAME OVER.</h1>';
          }
        }
      }, 1000);
      loan.interestInt = setInterval(() => {
        loan.due *= 1 + loan.interestRate;
        loan.due = parseFloat(loan.due.toFixed(2));
        updateLoanButtons();
      }, 10000);
    }

    function repayLoan(id) {
      const loan = activeLoans.find(l => l.id === id);
      if (!loan || loan.repaid) return;
      if (balance < loan.due) return showMessage("üí∏ Not enough money to repay.");
      balance -= loan.due;
      clearInterval(loan.interval);
      clearInterval(loan.interestInt);
      activeLoans = activeLoans.filter(l => l.id !== id);
      if (loan.timeLeft > 10) reputation += 10;
      loanHistory.push({...loan, status: "Repaid"});
      showMessage(`‚úÖ Repaid loan of $${loan.due.toFixed(2)}`);
      updateLoanButtons();
      updateStats();
    }

    function updateLoanButtons() {
      const area = document.getElementById("loan-buttons");
      const table = document.getElementById("loan-history");
      area.innerHTML = activeLoans.map(loan =>
        `<div>Loan: $${loan.base} ‚Üí $${loan.due.toFixed(2)} | ‚è≥ ${loan.timeLeft}s
        <button onclick="repayLoan(${loan.id})">Repay</button></div>`
      ).join('');
      table.innerHTML = loanHistory.map(l =>
        `<tr><td>$${l.base}</td><td>$${l.due.toFixed(2)}</td><td>${l.timeLeft}s</td><td>${l.status}</td></tr>`
      ).join('');
    }

    const housesForSale = [
      { name: "Tiny Apartment", price: 10000 },
      { name: "Suburban Home", price: 50000 },
      { name: "Luxury Condo", price: 250000 },
      { name: "Mansion", price: 2000000 },
      { name: "Private Island", price: 100000000 }
    ];

    function renderHousingMarket() {
      const area = document.getElementById("housesForSale");
      area.innerHTML = housesForSale.map(h =>
        `<div><strong>${h.name}</strong> - $${h.price.toLocaleString()}
        <button onclick="buyHouse(${h.price}, '${h.name}')">Buy</button></div>`
      ).join('');
      updateOwnedHouses();
    }

    function buyHouse(price, name) {
      if (balance < price) return showMessage("üí∏ Not enough to buy this property!");
      balance -= price;
      ownedHouses.push({ name, price });
      updateOwnedHouses();
      updateStats();
      showMessage(`‚úÖ Purchased ${name} for $${price.toLocaleString()}`);
    }

    function updateOwnedHouses() {
      const list = document.getElementById("ownedHousesList");
      list.innerHTML = ownedHouses.map(h => `<li>${h.name} - $${h.price.toLocaleString()}</li>`).join('');
    }

    setInterval(() => {
      const totalValue = ownedHouses.reduce((sum, h) => sum + h.price, 0);
      if (totalValue > 0) {
        const bonus = Math.floor(reputation / 10) * 0.001;
        const rent = totalValue * (0.01 + bonus);
        balance += rent;
        updateStats();
      }
    }, 5000);
  </script>

</body>
</html>
